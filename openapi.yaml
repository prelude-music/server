openapi: 3.1.0

info:
  title: Prelude API
  version: 0.0.0
  description: Prelude music server REST API specification
  license:
    name: GNU General Public License v3.0
    url: https://github.com/prelude-music/server/blob/main/LICENSE

servers:
  - url: "{baseUrl}"
    variables:
      baseUrl:
        description: The base URL of your Prelude server
        default: "http://localhost:9847"

tags: [
  {
    name: Prelude,
    description: "Prelude server and API information"
  },
  {
    name: Artists,
    description: "Every track is an associated with an artist and every artist has at least one track.
      When the last track of an artist is deleted, the artist is deleted as well.
      
      
      The artist ID is a hash of the artist's name. Changing the artist name will result in a new ID.
      Artist IDs will be identical across Prelude server instances of the same version."
  },
  {
    name: Albums,
    description: "An album is a collective release of tracks from the same artist.
      For tracks to be grouped under the same album by the Prelude server,
      the tracks must have the same artist name and the same album name set in their metadata.
      When the last track of an album is deleted, the album is deleted as well.
      
      
      The album ID is a hash of the album's artist name and the name of the album.
      Changing any of those will result in a new ID. Album IDs will be identical across Prelude server instances of the
      same version."
  },
  {
    name: Tracks,
    description: "Each audio file in the Prelude library is represented by a track object.
      
      
      The track ID is a hash of the artist's name, the album's name (or whether present), and the track name itself.
      Changing any of these will result in a new ID. Track IDs will be identical across Prelude server instances of the
      same version."
  },
  {
    name: Users,
    description: "Users are accounts secured by a password that can be used to access the Prelude server."
  },
  {
    name: Tokens,
    description: "Tokens enable authentication with the Prelude server. Using the token scopes,
you can control what endpoints the API token can be used for.


The available token scopes are:

| Scope               | Description                                                                                       | Recommended For |

|---------------------|---------------------------------------------------------------------------------------------------|-----------------|

| `library:read`      | Read-only access to Artists, Albums, and Tracks.                                                  | everyone        |

| `library:write`     | Write/modify access to Artists, Albums, and Tracks. Allows the user to upload/delete audio files. | admin           |

| `tokens:read:self`  | Read-only access to your Tokens.                                                                  | everyone        |

| `tokens:write:self` | Write/modify access to your Tokens.                                                               | everyone        |

| `tokens:read:all`   | Read-only access to everyone's Tokens.                                                            | admin           |

| `tokens:write:all`  | Write/modify access to everyone's Tokens.                                                         | admin           |

| `users:read`        | Read-only access to Users.                                                                        | admin           |

| `users:write`       | Write/modify access to Users.                                                                     | admin           |

| `admin`             | Grants full administrative access, including future API scopes.                                   | admin           |
"
  }

]

paths:
  /:
    get:
      tags: [Prelude]
      summary: API Server Info
      description: Basic information about the running Prelude server instance.
      security: []
      operationId: info
      responses:
        200:
          description: Prelude API server info
          content:
            application/json:
              schema:
                type: object
                properties:
                  prelude:
                    type: object
                    properties:
                      version:
                        type: string
                        description: The version of the Prelude server and the API. Follows semantic versioning and can be used to determine compatibility between a client and the server.
                        examples: [0.0.0]
                      spec:
                        type: object
                        description: OpenAPI specification file paths
                        properties:
                          json:
                            type: string
                            description: Parsed from the server's YAML OpenAPI specification and literally converted to JSON
                            examples: [openapi.json]
                          yaml:
                            type: string
                            description: The OpenAPI specification from the server repository
                            examples: [openapi.yaml]
        4XX:
          description: "Client error"

  /openapi.yaml:
    get:
      tags: [Prelude]
      summary: OpenAPI YAML Specification
      description: The OpenAPI specification from the server repository
      security: []
      operationId: getOpenapiYaml
      responses:
        200:
          description: The raw file
          content:
            text/yaml: {}
        4XX:
          description: "Client error"

  /openapi.json:
    get:
      tags: [Prelude]
      summary: OpenAPI JSON Specification
      description: A JSON version of the OpenAPI specification. This is a literal JSON representation of YAML version.
      security: []
      operationId: getOpenapiJson
      responses:
        200:
          description: A parsed representation from the YAML version, serialised into JSON
          content:
            application/json: {}
        4XX:
          description: "Client error"

  /artists:
    get:
      tags: [Artists]
      summary: List Artists
      security:
        - basic: [library:read]
        - bearer: [library:read]
      operationId: listArtists
      parameters: [
        {
          in: query,
          description: Number of resources to return per page,
          name: limit,
          schema: {
            type: integer,
            default: 100,
            minimum: 1
          }
        },
        {
          in: query,
          description: Page number to return,
          name: page,
          schema: {
            type: integer,
            default: 1,
            minimum: 1
          }
        },
        {
          in: query,
          description: "Get up to 100 artists by ID. If this is used, `limit` and `page` are ignored since all results are returned in a single page",
          name: id,
          schema: {
            type: array,
            items: {type: string}
          }
        }
      ]
      responses:
        200:
          description: A page of the artists collection
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Page"
                  - type: object
                    properties:
                      resources:
                        type: array
                        items:
                          $ref: "#/components/schemas/Artist"
        401:
          $ref: "#/components/responses/Unauthorised"
        403:
          $ref: "#/components/responses/Forbidden"

  /artists/{id}:
    get:
      tags: [Artists]
      summary: Get Artist
      security:
        - basic: [library:read]
        - bearer: [library:read]
      operationId: getArtist
      parameters: [
        {
          in: path,
          name: id,
          required: true,
          schema: {$ref: "#/components/schemas/Artist/properties/id"}
        }
      ]
      responses:
        200:
          description: An artist object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Artist"
        404:
          description: The requested artist could not be found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          $ref: "#/components/responses/Unauthorised"
        403:
          $ref: "#/components/responses/Forbidden"

  /artists/{id}/albums:
    get:
      tags: [Artists]
      summary: List Albums of Artist
      security:
        - basic: [library:read]
        - bearer: [library:read]
      operationId: listArtistAlbums
      parameters: [
        {
          in: path,
          name: id,
          required: true,
          schema: {$ref: "#/components/schemas/Artist/properties/id"}
        },
        {
          in: query,
          description: Number of resources to return per page,
          name: limit,
          schema: {
            type: integer,
            default: 100,
            minimum: 1
          }
        },
        {
          in: query,
          description: Page number to return,
          name: page,
          schema: {
            type: integer,
            default: 1,
            minimum: 1
          }
        }
      ]
      responses:
        200:
          description: A page of the artist's albums
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Page"
                  - type: object
                    properties:
                      resources:
                        type: array
                        items:
                          $ref: "#/components/schemas/Album"
        401:
          $ref: "#/components/responses/Unauthorised"
        403:
          $ref: "#/components/responses/Forbidden"

  /artists/{id}/tracks:
    get:
      tags: [Artists]
      summary: List Tracks of Artist
      security:
        - basic: [library:read]
        - bearer: [library:read]
      operationId: listArtistTracks
      parameters: [
        {
          in: path,
          name: id,
          required: true,
          schema: {$ref: "#/components/schemas/Artist/properties/id"}
        },
        {
          in: query,
          description: Number of resources to return per page,
          name: limit,
          schema: {
            type: integer,
            default: 100,
            minimum: 1
          }
        },
        {
          in: query,
          description: Page number to return,
          name: page,
          schema: {
            type: integer,
            default: 1,
            minimum: 1
          }
        }
      ]
      responses:
        200:
          description: A page of the artist's tracks
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Page"
                  - type: object
                    properties:
                      resources:
                        type: array
                        items:
                          $ref: "#/components/schemas/Track"
        401:
          $ref: "#/components/responses/Unauthorised"
        403:
          $ref: "#/components/responses/Forbidden"

  /artists/{id}/image:
    get:
      tags: [Artists]
      summary: Get Image of Artist
      security:
        - basic: [library:read]
        - bearer: [library:read]
      operationId: getArtistImage
      parameters: [
        {
          in: path,
          name: id,
          required: true,
          schema: {$ref: "#/components/schemas/Artist/properties/id"}
        }
      ]
      responses:
        200:
          description: The actual image binary of this artist, proxied from the artist's external image URL.
          content:
            image/*: {}
        404:
          description: The artist does not have an associated image
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        503:
          description: Failed to proxy the artist's external image
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          $ref: "#/components/responses/Unauthorised"
        403:
          $ref: "#/components/responses/Forbidden"

  /albums:
    get:
      tags: [Albums]
      summary: List Albums
      security:
        - basic: [library:read]
        - bearer: [library:read]
      operationId: listAlbums
      parameters: [
        {
          in: query,
          description: Number of resources to return per page,
          name: limit,
          schema: {
            type: integer,
            default: 100,
            minimum: 1
          }
        },
        {
          in: query,
          description: Page number to return,
          name: page,
          schema: {
            type: integer,
            default: 1,
            minimum: 1
          }
        }
      ]
      responses:
        200:
          description: A page of albums
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Page"
                  - type: object
                    properties:
                      resources:
                        type: array
                        items:
                          $ref: "#/components/schemas/Album"
        401:
          $ref: "#/components/responses/Unauthorised"
        403:
          $ref: "#/components/responses/Forbidden"

  /albums/{id}:
    get:
      tags: [Albums]
      summary: Get Album
      security:
        - basic: [library:read]
        - bearer: [library:read]
      operationId: getAlbum
      parameters: [
        {
          in: path,
          name: id,
          required: true,
          schema: {$ref: "#/components/schemas/Album/properties/id"}
        }
      ]
      responses:
        200:
          description: An album object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Album"
        404:
          description: The requested album could not be found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          $ref: "#/components/responses/Unauthorised"
        403:
          $ref: "#/components/responses/Forbidden"

  /albums/{id}/tracks:
    get:
      tags: [Albums]
      summary: List Tracks in Album
      description: The tracks are always sorted by `Track#track.no` (if available).
      security:
        - basic: [library:read]
        - bearer: [library:read]
      operationId: listAlbumTracks
      parameters: [
        {
          in: path,
          name: id,
          required: true,
          schema: {$ref: "#/components/schemas/Album/properties/id"}
        },
        {
          in: query,
          description: Number of resources to return per page,
          name: limit,
          schema: {
            type: integer,
            default: 100,
            minimum: 1
          }
        },
        {
          in: query,
          description: Page number to return,
          name: page,
          schema: {
            type: integer,
            default: 1,
            minimum: 1
          }
        }
      ]
      responses:
        200:
          description: A page of tracks
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Page"
                  - type: object
                    properties:
                      resources:
                        type: array
                        items:
                          $ref: "#/components/schemas/Track"
        401:
          $ref: "#/components/responses/Unauthorised"
        403:
          $ref: "#/components/responses/Forbidden"

  /albums/{id}/image:
    get:
      tags: [Albums]
      summary: Get Image of Album
      description: The image is obtained from the metadata of one of the first 5 tracks in the album.
      security:
        - basic: [library:read]
        - bearer: [library:read]
      operationId: getAlbumImage
      parameters: [
        {
          in: path,
          name: id,
          required: true,
          schema: {$ref: "#/components/schemas/Album/properties/id"}
        }
      ]
      responses:
        200:
          description: The actual image binary for this album
          content:
            image/*: {}
        404:
          description: The album does not have an associated image
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          $ref: "#/components/responses/Unauthorised"
        403:
          $ref: "#/components/responses/Forbidden"

  /tracks:
    get:
      tags: [Tracks]
      summary: List Tracks
      security:
        - basic: [library:read]
        - bearer: [library:read]
      operationId: listTracks
      parameters: [
        {
          in: query,
          description: Number of resources to return per page,
          name: limit,
          schema: {
            type: integer,
            default: 100,
            minimum: 1
          }
        },
        {
          in: query,
          description: Page number to return,
          name: page,
          schema: {
            type: integer,
            default: 1,
            minimum: 1
          }
        },
        {
          in: query,
          description: Sort tracks,
          name: sort,
          schema: {
            type: string,
            enum: [
              title:asc,
              title:desc,
              year:asc,
              year:desc,
              track_no:asc,
              track_no:desc,
              duration:asc,
              duration:desc
            ],
            examples: [duration:desc]
          }
        }
      ]
      responses:
        200:
          description: A page of tracks
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Page"
                  - type: object
                    properties:
                      resources:
                        type: array
                        items:
                          $ref: "#/components/schemas/Track"
        401:
          $ref: "#/components/responses/Unauthorised"
        403:
          $ref: "#/components/responses/Forbidden"

  /tracks/{id}:
    get:
      tags: [Tracks]
      summary: Get Track
      security:
        - basic: [library:read]
        - bearer: [library:read]
      operationId: getTrack
      parameters: [
        {
          in: path,
          name: id,
          required: true,
          schema: {$ref: "#/components/schemas/Track/properties/id"}
        }
      ]
      responses:
        200:
          description: A track object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Track"
        404:
          description: The requested track could not be found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          $ref: "#/components/responses/Unauthorised"
        403:
          $ref: "#/components/responses/Forbidden"

  /tracks/{id}/audio:
    get:
      tags: [Tracks]
      summary: Get Audio of Track
      security:
        - basic: [library:read]
        - bearer: [library:read]
      operationId: getTrackAudio
      parameters: [
        {
          in: path,
          name: id,
          required: true,
          schema: {$ref: "#/components/schemas/Track/properties/id"}
        }
      ]
      responses:
        200:
          description: The actual binary audio of the track
          content:
            audio/aiff: {}
            audio/aac: {}
            audio/ape: {}
            audio/asf: {}
            audio/x-bwf: {}
            audio/x-dff: {}
            audio/x-dsf: {}
            audio/flac: {}
            audio/mpeg: {}
            audio/x-matroska: {}
            video/x-matroska: {}
            audio/musepack: {}
            audio/mp4: {}
            audio/ogg: {}
            audio/opus: {}
            audio/speex: {}
            video/ogg: {}
            audio/vorbis: {}
            audio/wav: {}
            audio/webm: {}
            audio/wavpack: {}
            audio/x-ms-wma: {}
        401:
          $ref: "#/components/responses/Unauthorised"
        403:
          $ref: "#/components/responses/Forbidden"

  /tracks/{id}/image:
    get:
      tags: [Tracks]
      summary: Get Image of Track
      description: Obtained from the track metadata
      security:
        - basic: [library:read]
        - bearer: [library:read]
      operationId: getTrackImage
      parameters: [
        {
          in: path,
          name: id,
          required: true,
          schema: {$ref: "#/components/schemas/Track/properties/id"}
        }
      ]
      responses:
        200:
          description: The actual image binary for this track
          content:
            image/*: {}
        404:
          description: The track does not have an associated image
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          $ref: "#/components/responses/Unauthorised"
        403:
          $ref: "#/components/responses/Forbidden"

  /users:
    get:
      tags: [Users]
      summary: List Users
      security:
        - basic: [users:read]
        - bearer: [users:read]
      operationId: listUsers
      parameters: [
        {
          in: query,
          description: Number of resources to return per page,
          name: limit,
          schema: {
            type: integer,
            default: 100,
            minimum: 1
          }
        },
        {
          in: query,
          description: Page number to return,
          name: page,
          schema: {
            type: integer,
            default: 1,
            minimum: 1
          }
        }
      ]
      responses:
        200:
          description: A page of users
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Page"
                  - type: object
                    properties:
                      resources:
                        type: array
                        items:
                          $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/Unauthorised"
        403:
          $ref: "#/components/responses/Forbidden"
    post:
      tags: [Users]
      summary: Create User
      security:
        - basic: [users:write]
        - bearer: [users:write]
      operationId: createUser
      requestBody:
        $ref: "#/components/requestBodies/User"
      responses:
        200:
          description: The created user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/Unauthorised"
        403:
          $ref: "#/components/responses/Forbidden"
    delete:
      tags: [Users]
      summary: Delete All Users
      description: Will delete all users and all tokens.
      security:
        - basic: [users:write]
        - bearer: [users:write]
      operationId: deleteAllUsers
      responses:
        204:
          description: All users deleted successfully
        401:
          $ref: "#/components/responses/Unauthorised"
        403:
          $ref: "#/components/responses/Forbidden"

  /users/{id}:
    get:
      tags: [Users]
      summary: Get User
      security:
        - basic: [users:read]
        - bearer: [users:read]
      operationId: getUser
      parameters: [
        {
          in: path,
          name: id,
          required: true,
          schema: {$ref: "#/components/schemas/User/properties/id"}
        }
      ]
      responses:
        200:
          description: The requested user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404:
          description: The requested user could not be found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          $ref: "#/components/responses/Unauthorised"
        403:
          $ref: "#/components/responses/Forbidden"
    delete:
      tags: [Users]
      summary: Delete User
      security:
        - basic: [users:write]
        - bearer: [users:write]
      operationId: deleteUser
      parameters: [
        {
          in: path,
          name: id,
          required: true,
          schema: {$ref: "#/components/schemas/User/properties/id"}
        }
      ]
      responses:
        204:
          description: The requested user was deleted successfully
        401:
          $ref: "#/components/responses/Unauthorised"
        403:
          $ref: "#/components/responses/Forbidden"
    put:
      tags: [Users]
      summary: Replace User
      security:
        - basic: [users:write]
        - bearer: [users:write]
      operationId: replaceUser
      parameters: [
        {
          in: path,
          name: id,
          required: true,
          schema: {$ref: "#/components/schemas/User/properties/id"}
        }
      ]
      requestBody:
        $ref: "#/components/requestBodies/User"
      responses:
        200:
          description: The updated user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404:
          description: The requested user could not be found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          $ref: "#/components/responses/Unauthorised"
        403:
          $ref: "#/components/responses/Forbidden"
    patch:
      tags: [Users]
      summary: Update User
      security:
        - basic: [users:write]
        - bearer: [users:write]
      operationId: updateUser
      parameters: [
        {
          in: path,
          name: id,
          required: true,
          schema: {$ref: "#/components/schemas/User/properties/id"}
        }
      ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserWrite"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/UserWrite"
      responses:
        200:
          description: The updated user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404:
          description: The requested user could not be found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          $ref: "#/components/responses/Unauthorised"
        403:
          $ref: "#/components/responses/Forbidden"

  /tokens:
    get:
      tags: [Tokens]
      summary: List Tokens
      security:
        - basic: [tokens:read:self]
        - bearer: [tokens:read:self]
        - basic: [tokens:read:all]
        - bearer: [tokens:read:all]
      operationId: listTokens
      parameters: [
        {
          in: query,
          description: Number of resources to return per page,
          name: limit,
          schema: {
            type: integer,
            default: 100,
            minimum: 1
          }
        },
        {
          in: query,
          description: Page number to return,
          name: page,
          schema: {
            type: integer,
            default: 1,
            minimum: 1
          }
        },
        {
          in: query,
          description: Get tokens for a specific user. Incompatible with the `note` parameter.,
          name: user,
          schema: {
            $ref: "#/components/schemas/User/properties/id"
          }
        },
        {
          in: query,
          description: "Get ALL tokens. By default, only the tokens of the authenticated user are returned.
            Incompatible with the `user` parameter.",
          name: all,
          required: false,
          schema: {
            type: string,
            examples: [""]
          }
        }
      ]
      responses:
        200:
          description: A page of tokens
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Page"
                  - type: object
                    properties:
                      resources:
                        type: array
                        items:
                          $ref: "#/components/schemas/Token"
        401:
          $ref: "#/components/responses/Unauthorised"
        403:
          $ref: "#/components/responses/Forbidden"
    post:
      tags: [Tokens]
      summary: Create Token
      security:
        - basic: [tokens:write:self]
        - bearer: [tokens:write:self]
        - basic: [tokens:write:all]
        - bearer: [tokens:write:all]
      operationId: createToken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [user, expires, scopes, note]
              properties:
                user:
                  description: The ID of the user to create this token for. You can only use this if you have the `tokens:write:all` scope.
                  allOf:
                    - $ref: "#/components/schemas/User/properties/id"
                expires:
                  $ref: "#/components/schemas/Token/properties/expires"
                scopes:
                  $ref: "#/components/schemas/Token/properties/scopes"
                note:
                  $ref: "#/components/schemas/Token/properties/note"
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: [user, expires, scopes, note]
              properties:
                user:
                  description: The ID of the user to create this token for. You can only use this if you have the `tokens:write:all` scope.
                  allOf:
                    - $ref: "#/components/schemas/User/properties/id"
                expires:
                  $ref: "#/components/schemas/Token/properties/expires"
                scopes:
                  $ref: "#/components/schemas/Token/properties/scopes"
                note:
                  $ref: "#/components/schemas/Token/properties/note"
      responses:
        201:
          description: The created token
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Token"
                  - type: object
                    properties:
                      secret:
                        type: string
                        description: The token secret key used for authenticating requests. This is never available again.
                        examples: [ED80gmnuZumZ5N2kA0exhN2FVjpdBdk2jVze]
        401:
          $ref: "#/components/responses/Unauthorised"
        403:
          $ref: "#/components/responses/Forbidden"
    delete:
      tags: [Tokens]
      summary: Delete All Tokens
      security:
        - basic: [tokens:write:self]
        - bearer: [tokens:write:self]
        - basic: [tokens:write:all]
        - bearer: [tokens:write:all]
      operationId: deleteAllTokens
      responses:
        204:
          description: All tokens deleted successfully
        401:
          $ref: "#/components/responses/Unauthorised"
        403:
          $ref: "#/components/responses/Forbidden"

  /tokens/{id}:
    get:
      tags: [Tokens]
      summary: Get Token
      security:
        - basic: [tokens:read:self]
        - bearer: [tokens:read:self]
        - basic: [tokens:read:all]
        - bearer: [tokens:read:all]
      operationId: getToken
      parameters: [
        {
          in: path,
          name: id,
          required: true,
          schema: {$ref: "#/components/schemas/Token/properties/id"}
        }
      ]
      responses:
        200:
          description: The token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        404:
          description: The requested token could not be found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          $ref: "#/components/responses/Unauthorised"
        403:
          $ref: "#/components/responses/Forbidden"
    delete:
      tags: [Tokens]
      summary: Delete Token
      security:
        - basic: [tokens:write:self]
        - bearer: [tokens:write:self]
        - basic: [tokens:write:all]
        - bearer: [tokens:write:all]
      operationId: deleteToken
      parameters: [
        {
          in: path,
          name: id,
          required: true,
          schema: {$ref: "#/components/schemas/Token/properties/id"}
        }
      ]
      responses:
        204:
          description: The requested token was deleted successfully
        404:
          description: The requested token could not be found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          $ref: "#/components/responses/Unauthorised"
        403:
          $ref: "#/components/responses/Forbidden"
    put:
      tags: [Tokens]
      summary: Replace Token
      security:
        - basic: [tokens:write:self]
        - bearer: [tokens:write:self]
        - basic: [tokens:write:all]
        - bearer: [tokens:write:all]
      operationId: replaceToken
      parameters: [
        {
          in: path,
          name: id,
          required: true,
          schema: {$ref: "#/components/schemas/Token/properties/id"}
        }
      ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [note]
              properties:
                note:
                  $ref: "#/components/schemas/Token/properties/note"
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: [note]
              properties:
                note:
                  $ref: "#/components/schemas/Token/properties/note"
      responses:
        200:
          description: The updated token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        404:
          description: The requested token could not be found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          $ref: "#/components/responses/Unauthorised"
        403:
          $ref: "#/components/responses/Forbidden"
    patch:
      tags: [Tokens]
      summary: Update Token
      security:
        - basic: [tokens:write:self]
        - bearer: [tokens:write:self]
        - basic: [tokens:write:all]
        - bearer: [tokens:write:all]
      operationId: updateToken
      parameters: [
        {
          in: path,
          name: id,
          required: true,
          schema: {$ref: "#/components/schemas/Token/properties/id"}
        }
      ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                note:
                  $ref: "#/components/schemas/Token/properties/note"
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                note:
                  $ref: "#/components/schemas/Token/properties/note"
      responses:
        200:
          description: The updated token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        404:
          description: The requested token could not be found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          $ref: "#/components/responses/Unauthorised"
        403:
          $ref: "#/components/responses/Forbidden"

components:
  securitySchemes:
    basic:
      type: http
      scheme: Basic
      description: Authenticate using username and password. All scopes granted on your user account will apply. Please use HTTPS.
    bearer:
      type: http
      scheme: Bearer
      description: Authenticate using an API Token.
  responses:
    Unauthorised:
      description: |-
        Authorisation is missing or invalid. Possible causes for authorisation to be invalid are
          - the username or password is incorrect
          - the token secret is incorrect
          - the token secret is correct, but the token has expired
          - the username and password, or the token secret, are/is correct, but the user is disabled
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Forbidden:
      description: The scopes of the user or token used to authenticate this request lacked the required scope for this endpoint.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
  schemas:
    Artist:
      type: object
      description: An artist object
      properties:
        id:
          type: string
          title: Artist ID
          examples: [h0+wZAY3FUjqOPmL1WODJCH1L44]
        name:
          type: string
          title: Name of the artist
          examples: [Johann Sebastian Bach]
        image:
          type:
            - string
            - "null"
          title: Artist image
          format: uri
          examples: [https://example.com/image.jpg]

    Album:
      type: object
      description: An album object. This is a collective release of a list of tracks by an artist. For tracks to become part of an album, they must have exactly the same artist and album name in their metadata.
      properties:
        id:
          type: string
          title: Album ID
          examples: [GxLAk47P9IJnxLHcW2WKJ+a0Wv4]
        name:
          type: string
          title: Album name
          examples: [The Well-Tempered Clavier. Book I]
        artist:
          $ref: "#/components/schemas/Artist/properties/id"

    Track:
      type: object
      properties:
        id:
          type: string
          title: Track ID
          examples: [lJzqGqUGjPdAI+bEOrtHeLstgTU]
        title:
          type: string
          title: Track title
          description: If a title is not specified in the metadata, this will default to the base name of the file, including the extension.
          examples: [Prelude and Fugue in C Minor, BWV 847]
        artist:
          $ref: "#/components/schemas/Artist/properties/id"
        album:
          description: This is nullable as tracks are not required to be part of an album.
          oneOf: [
            {$ref: "#/components/schemas/Album/properties/id"},
            {type: "null"}
          ]
        year:
          type:
            - integer
            - "null"
          title: Track year
          examples: [1722]
        genres:
          type: array
          items:
            type: string
            examples: [classical]
          title: Track genres
        track:
          type:
            - object
            - "null"
          properties:
            no:
              type: integer
              title: Track number
              examples: [2]
            of:
              type:
                - integer
                - "null"
              title: Of total tracks (presumably in the album)
              examples: [24]
        disk:
          type:
            - object
            - "null"
          properties:
            no:
              type: integer
              title: Disk number
              examples: [1]
            of:
              type:
                - integer
                - "null"
              title: Of total disks
              examples: [2]
        duration:
          type: integer
          title: Track duration
          description: Track duration in seconds
          examples: [180]
        meta:
          type: object
          title: Track meta
          properties:
            channels:
              type: integer
              description: Number of audio channels
              examples: [2]
            sampleRate:
              type: integer
              description: Sample rate in Hz
              examples: [44100]
            bitrate:
              type: integer
              description: Bitrate in bits per second
              examples: [128012]
            lossless:
              type: boolean
              description: Whether the audio file is in a lossless/uncompressed format
              examples: [false]

    User:
      type: object
      properties:
        id:
          type: string
          title: User ID
          examples: [d7e33c2c-0454-4da5-b079-d46e7b47cf22]
        username:
          type: string
          title: Unique username. Used for Basic auth with username and password
          examples: [user123]
          minLength: 3
          maxLength: 24
          pattern: ^[a-zA-Z0-9-._]+$
        scopes:
          type: array
          items:
            $ref: "#/components/schemas/Scope"
          title: User scopes
        disabled:
          type: boolean
          title: If true, the user cannot authenticate any API requests (even with tokens).
          examples: [false]

    Token:
      type: object
      properties:
        id:
          type: string
          title: Token ID
          examples: [7e10e4ff-be3f-46d0-9865-941c3d6b62c8]
        user:
          $ref: "#/components/schemas/User/properties/id"
        expires:
          description: The date in Unix time when the token expires. If null, the token does not expire. After the token expires, the server will consider it invalid.
          type:
            - integer
            - "null"
          format: unix-time
          examples: [1893448800]
        scopes:
          type: array
          items:
            $ref: "#/components/schemas/Scope"
          title: Token scopes
        note:
          type: string
          description: A user-specified note for the token (e.g. description of what this token is for).

    Scope:
      description: Controls access to API resources
      type: string
      enum: [library:read, library:write, tokens:read:self, tokens:write:self, tokens:read:all, tokens:write:all, users:read, users:write]

    Page:
      description: A page is a partial list of items from a larger collection
      type: object
      properties:
        page:
          description: The current page number
          type: integer
          examples: [1]
          minimum: 1
        limit:
          description: The maximum number of items per page
          examples: [100]
          minimum: 0
        total:
          description: The total number of items in the entire collection (not just the current page)
          examples: [91]
          minimum: 0
        href:
          description: The path and query parameters of the current page
          type: string
          examples: [/path?and=query]
        previous:
          description: The path and query parameters for the previous page, unless this is the first page
          type:
            - string
            - "null"
          examples: [null]
        next:
          description: The path and query parameters for the next page, unless this is the last page
          type:
            - string
            - "null"
          examples: [null]

    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              examples: [A user-friendly error message.]
            fields:
              type: object
              additionalProperties:
                type: string
                examples: [Field-specific errors mapped to request body fields. If this object is not empty, these error messages should be shown instead of the one in `message`.]

    BooleanLike:
      oneOf:
        - type: boolean
          enum: [true, false]
        - type: string
          enum: ["true", "false", "1", "0", "on"]
        - type: integer
          enum: [1, 0]
      examples: [false]

    UserWrite:
      type: object
      properties:
        username:
          $ref: "#/components/schemas/User/properties/username"
        password:
          type: string
          description: Plain-text password. Please use HTTPS.
          examples: ["VerySecure123!"]
        scopes:
          $ref: "#/components/schemas/User/properties/scopes"
        disabled:
          $ref: "#/components/schemas/BooleanLike"

  requestBodies:
    User:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/UserWrite"
            required: [username, password, scopes, disabled]
        application/x-www-form-urlencoded:
          schema:
            allOf:
              - $ref: "#/components/schemas/UserWrite"
            required: [username, password, scopes, disabled]

