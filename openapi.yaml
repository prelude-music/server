openapi: 3.0.3

info:
  title: Prelude API
  version: 0.0.0
  description: Prelude music server REST API specification
  license:
    name: GNU General Public License v3.0
    url: https://github.com/prelude-music/server/blob/main/LICENSE

tags: [
  {
    name: Prelude,
    description: "Prelude server and API information"
  },
  {
    name: Artists,
    description: "Every track is an associated with an artist and every artist has at least one track.
      When the last track of an artist is deleted, the artist is deleted as well.
      
      
      The artist ID is a hash of the artist's name. Changing the artist name will result in a new ID.
      Artist IDs will be identical across Prelude server instances of the same version."
  },
  {
    name: Albums,
    description: "An album is a collective release of tracks from the same artist.
      For tracks to be grouped under the same album by the Prelude server,
      the tracks must have the same artist name and the same album name set in their metadata.
      When the last track of an album is deleted, the album is deleted as well.
      
      
      The album ID is a hash of the album's artist name and the name of the album.
      Changing any of those will result in a new ID. Album IDs will be identical across Prelude server instances of the
      same version."
  },
  {
    name: Tracks,
    description: "Each audio file in the Prelude library is represented by a track object.
      
      
      The track ID is a hash of the artist's name, the album's name (or whether present), and the track name itself.
      Changing any of these will result in a new ID. Track IDs will be identical across Prelude server instances of the
      same version."
  }
]

paths:
  /:
    get:
      tags: [ Prelude ]
      summary: API Server Info
      description: Basic information about the running Prelude server instance.
      responses:
        200:
          description: Prelude API server info
          content:
            application/json:
              schema:
                type: object
                properties:
                  prelude:
                    type: object
                    properties:
                      version:
                        type: string
                        description: The version of the Prelude server and the API. Follows semantic versioning and can be used to determine compatibility between a client and the server.
                        example: 0.0.0
                      spec:
                        type: object
                        description: OpenAPI specification file paths
                        properties:
                          json:
                            type: string
                            description: Parsed from the server's YAML OpenAPI specification and literally converted to JSON
                            example: openapi.json
                          yaml:
                            type: string
                            description: The OpenAPI specification from the server repository
                            example: openapi.yaml

  /openapi.yaml:
    get:
      tags: [ Prelude ]
      summary: OpenAPI YAML Specification
      description: The OpenAPI specification from the server repository
      responses:
        200:
          description: The raw file
          content:
            text/yaml: { }

  /openapi.json:
    get:
      tags: [ Prelude ]
      summary: OpenAPI JSON Specification
      description: A JSON version of the OpenAPI specification. This is a literal JSON representation of YAML version.
      responses:
        200:
          description: A parsed representation from the YAML version, serialised into JSON
          content:
            application/json: { }

  /artists:
    get:
      tags: [ Artists ]
      summary: List Artists
      parameters: [
        {
          in: query,
          description: Number of resources to return per page,
          name: limit,
          schema: {
            type: integer,
            default: 100,
            minimum: 1
          }
        },
        {
          in: query,
          description: Page number to return,
          name: page,
          schema: {
            type: integer,
            default: 1,
            minimum: 1
          }
        },
        {
          in: query,
          description: "Get up to 100 artists by ID. If this is used, `limit` and `page` are ignored since all results are returned in a single page",
          name: id,
          schema: {
            type: array,
            items: { type: string }
          }
        }
      ]
      responses:
        200:
          description: A page of the artists collection
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Page<T>"
                  - type: object
                    properties:
                      resources:
                        type: array
                        items:
                          $ref: "#/components/schemas/Artist"

  /artists/{id}:
    get:
      tags: [ Artists ]
      summary: Get Artist
      parameters: [
        {
          in: path,
          name: id,
          required: true,
          schema: { $ref: "#/components/schemas/Artist/properties/id" }
        }
      ]
      responses:
        200:
          description: An artist object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Artist"
        404:
          description: The requested artist could not be found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /artists/{id}/albums:
    get:
      tags: [ Artists ]
      summary: List Albums of Artist
      parameters: [
        {
          in: path,
          name: id,
          required: true,
          schema: { $ref: "#/components/schemas/Artist/properties/id" }
        },
        {
          in: query,
          description: Number of resources to return per page,
          name: limit,
          schema: {
            type: integer,
            default: 100,
            minimum: 1
          }
        },
        {
          in: query,
          description: Page number to return,
          name: page,
          schema: {
            type: integer,
            default: 1,
            minimum: 1
          }
        }
      ]
      responses:
        200:
          description: A page of the artist's albums
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Page<T>"
                  - type: object
                    properties:
                      resources:
                        type: array
                        items:
                          $ref: "#/components/schemas/Album"

  /artists/{id}/tracks:
    get:
      tags: [ Artists ]
      summary: List Tracks of Artist
      parameters: [
        {
          in: path,
          name: id,
          required: true,
          schema: { $ref: "#/components/schemas/Artist/properties/id" }
        },
        {
          in: query,
          description: Number of resources to return per page,
          name: limit,
          schema: {
            type: integer,
            default: 100,
            minimum: 1
          }
        },
        {
          in: query,
          description: Page number to return,
          name: page,
          schema: {
            type: integer,
            default: 1,
            minimum: 1
          }
        }
      ]
      responses:
        200:
          description: A page of the artist's tracks
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Page<T>"
                  - type: object
                    properties:
                      resources:
                        type: array
                        items:
                          $ref: "#/components/schemas/Track"

  /artists/{id}/image:
    get:
      tags: [ Artists ]
      summary: Get Image of Artist
      parameters: [
        {
          in: path,
          name: id,
          required: true,
          schema: { $ref: "#/components/schemas/Artist/properties/id" }
        }
      ]
      responses:
        200:
          description: The actual image binary of this artist, proxied from the artist's external image URL.
          content:
            image/*: { }
        404:
          description: The artist does not have an associated image
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        503:
          description: Failed to proxy the artist's external image
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /albums:
    get:
      tags: [ Albums ]
      summary: List Albums
      parameters: [
        {
          in: query,
          description: Number of resources to return per page,
          name: limit,
          schema: {
            type: integer,
            default: 100,
            minimum: 1
          }
        },
        {
          in: query,
          description: Page number to return,
          name: page,
          schema: {
            type: integer,
            default: 1,
            minimum: 1
          }
        }
      ]
      responses:
        200:
          description: A page of albums
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Page<T>"
                  - type: object
                    properties:
                      resources:
                        type: array
                        items:
                          $ref: "#/components/schemas/Album"

  /albums/{id}:
    get:
      tags: [ Albums ]
      summary: Get Album
      parameters: [
        {
          in: path,
          name: id,
          required: true,
          schema: { $ref: "#/components/schemas/Album/properties/id" }
        }
      ]
      responses:
        200:
          description: An album object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Album"
        404:
          description: The requested album could not be found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /albums/{id}/tracks:
    get:
      tags: [ Albums ]
      summary: List Tracks in Album
      description: The tracks are always sorted by `Track#track.no` (if available).
      parameters: [
        {
          in: path,
          name: id,
          required: true,
          schema: { $ref: "#/components/schemas/Album/properties/id" }
        },
        {
          in: query,
          description: Number of resources to return per page,
          name: limit,
          schema: {
            type: integer,
            default: 100,
            minimum: 1
          }
        },
        {
          in: query,
          description: Page number to return,
          name: page,
          schema: {
            type: integer,
            default: 1,
            minimum: 1
          }
        }
      ]
      responses:
        200:
          description: A page of tracks
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Page<T>"
                  - type: object
                    properties:
                      resources:
                        type: array
                        items:
                          $ref: "#/components/schemas/Track"

  /albums/{id}/image:
    get:
      tags: [ Albums ]
      summary: Get Image of Album
      description: The image is obtained from the metadata of one of the first 5 tracks in the album.
      parameters: [
        {
          in: path,
          name: id,
          required: true,
          schema: { $ref: "#/components/schemas/Album/properties/id" }
        }
      ]
      responses:
        200:
          description: The actual image binary for this album
          content:
            image/*: { }
        404:
          description: The album does not have an associated image
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tracks:
    get:
      tags: [ Tracks ]
      summary: List Tracks
      parameters: [
        {
          in: query,
          description: Number of resources to return per page,
          name: limit,
          schema: {
            type: integer,
            default: 100,
            minimum: 1
          }
        },
        {
          in: query,
          description: Page number to return,
          name: page,
          schema: {
            type: integer,
            default: 1,
            minimum: 1
          }
        },
        {
          in: query,
          description: Sort tracks,
          name: sort,
          schema: {
            type: string,
            enum: [
              title:asc,
              title:desc,
              year:asc,
              year:desc,
              track_no:asc,
              track_no:desc,
              duration:asc,
              duration:desc
            ],
            example: duration:desc
          }
        }
      ]
      responses:
        200:
          description: A page of tracks
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Page<T>"
                  - type: object
                    properties:
                      resources:
                        type: array
                        items:
                          $ref: "#/components/schemas/Track"

  /tracks/{id}:
    get:
      tags: [ Tracks ]
      summary: Get Track
      parameters: [
        {
          in: path,
          name: id,
          required: true,
          schema: { $ref: "#/components/schemas/Track/properties/id" }
        }
      ]
      responses:
        200:
          description: A track object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Track"
        404:
          description: The requested track could not be found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tracks/{id}/audio:
    get:
      tags: [ Tracks ]
      summary: Get Audio of Track
      parameters: [
        {
          in: path,
          name: id,
          required: true,
          schema: { $ref: "#/components/schemas/Track/properties/id" }
        }
      ]
      responses:
        200:
          description: The actual binary audio of the track
          content:
            audio/aiff: { }
            audio/aac: { }
            audio/ape: { }
            audio/asf: { }
            audio/x-bwf: { }
            audio/x-dff: { }
            audio/x-dsf: { }
            audio/flac: { }
            audio/mpeg: { }
            audio/x-matroska: { }
            video/x-matroska: { }
            audio/musepack: { }
            audio/mp4: { }
            audio/ogg: { }
            audio/opus: { }
            audio/speex: { }
            video/ogg: { }
            audio/vorbis: { }
            audio/wav: { }
            audio/webm: { }
            audio/wavpack: { }
            audio/x-ms-wma: { }

  /tracks/{id}/image:
    get:
      tags: [ Tracks ]
      summary: Get Image of Track
      description: Obtained from the track metadata
      parameters: [
        {
          in: path,
          name: id,
          required: true,
          schema: { $ref: "#/components/schemas/Track/properties/id" }
        }
      ]
      responses:
        200:
          description: The actual image binary for this track
          content:
            image/*: { }
        404:
          description: The track does not have an associated image
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    Artist:
      type: object
      description: An artist object
      properties:
        id:
          type: string
          title: Artist ID
          example: h0+wZAY3FUjqOPmL1WODJCH1L44
        name:
          type: string
          title: Name of the artist
          example: Johann Sebastian Bach
        image:
          type: string
          title: Artist image
          format: uri
          nullable: true
          example: https://example.com/image.jpg

    Album:
      type: object
      description: An album object. This is a collective release of a list of tracks by an artist. For tracks to become part of an album, they must have exactly the same artist and album name in their metadata.
      properties:
        id:
          type: string
          title: Album ID
          example: GxLAk47P9IJnxLHcW2WKJ+a0Wv4
        name:
          type: string
          title: Album name
          example: The Well-Tempered Clavier. Book I
        artist:
          $ref: "#/components/schemas/Artist/properties/id"

    Track:
      type: object
      properties:
        id:
          type: string
          title: Track ID
          example: lJzqGqUGjPdAI+bEOrtHeLstgTU
        title:
          type: string
          title: Track title
          description: If a title is not specified in the metadata, this will default to the base name of the file, including the extension.
          example: Prelude and Fugue in C Minor, BWV 847
        artist:
          $ref: "#/components/schemas/Artist/properties/id"
        album:
          description: This is nullable as tracks are not required to be part of an album.
          allOf: [
            { $ref: "#/components/schemas/Album/properties/id" }
          ]
          nullable: true
        year:
          type: integer
          title: Track year
          example: 1722
          nullable: true
        genres:
          type: array
          items:
            type: string
            example: classical
          title: Track genres
        track:
          type: object
          nullable: true
          properties:
            no:
              type: integer
              title: Track number
              example: 2
            of:
              type: integer
              title: Of total tracks (presumably in the album)
              example: 24
              nullable: true
        disk:
          type: object
          nullable: true
          properties:
            no:
              type: integer
              title: Disk number
              example: 1
            of:
              type: integer
              title: Of total disks
              example: 2
              nullable: true
        duration:
          type: integer
          title: Track duration
          description: Track duration in seconds
          example: 180
        meta:
          type: object
          title: Track meta
          properties:
            channels:
              type: integer
              description: Number of audio channels
              example: 2
            sampleRate:
              type: integer
              description: Sample rate in Hz
              example: 44100
            bitrate:
              type: integer
              description: Bitrate in bits per second
              example: 128012
            lossless:
              type: boolean
              description: Whether the audio file is in a lossless/uncompressed format
              example: false

    Page<T>:
      description: A page is a partial list of items from a larger collection
      type: object
      properties:
        page:
          description: The current page number
          type: integer
          example: 1
          minimum: 1
        limit:
          description: The maximum number of items per page
          example: 100
          minimum: 0
        total:
          description: The total number of items in the entire collection (not just the current page)
          example: 91
          minimum: 0
        href:
          description: The path and query parameters of the current page
          type: string
          example: /path?and=query
        previous:
          description: The path and query parameters for the previous page, unless this is the first page
          type: string
          nullable: true
          example: null
        next:
          description: The path and query parameters for the next page, unless this is the last page
          type: string
          nullable: true
          example: null

    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              example: A user-friendly error message.
